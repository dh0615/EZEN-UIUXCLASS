// window운영 체제 안에 내장되어 있는 내장함수 사용해보기
// JS => 싱글스레드로 작동하는 객체 지향 프로그래밍 언어
// 싱글 => 1 / 스레드 => 길 / 상글스레드 => 1차선 통행
// <-> 멀티스레드 : 복수의 차선을 만들 수 있음
// 싱글스레드 이다보니 동시성이 불가했음 = 비동기처리가 안됨
// 로딩스피너
// 자바스크립트가 비동기처리가 되는 것처럼 보여주는 게 window운영체제
// clearInterval
// clearTimeout
// setInterval
// setTimeout

// ---------------------------------
// 1. setInterval() : 일정 시간마다 반복해서 무언가를 처리하는 함수
// const greeting = () => {
//   console.log("안녕하세요;;");
// };
// setInterval(
//   greeting,
//   2000
// );
/* 2초에 한번씩 greeting 이라는 함수 실행 */ /* 프로그래밍 언어에서는 시간을 밀리초로 .. 1000밀리초 = 1초 */

// setInterval(() => {
//   console.log("안녕하세요..");
// }, 2000);
// greeting 함수가 콜백함수니까 위처럼 쓸 수 있음
// clearInterval : 특정 조건에 따라서 반복실행 함수를 멈추게 하는 함수

// 단락회로평가
// 사전에 기준값을 정해놓고 여기에 도달했다 안했다

// let counter = 0; /* 전역스코프 , 재할당 가능 */

// let timer = setInterval(() => {
//   console.log("안녕하세요???");
//   counter++; /* 전역스코프인 let counter = 0 줬기 때문에 ++를 줄 수 있었음 */
//   if (counter === 5) {
//     clearInterval(timer); /* 안에 콜백함수를 받는다 */
//     /* timer = 재귀함수 = 본인 스스로의 함수에 다시 소환돼서 들어감 */
//     /* 본인 스스로를 리셋하고 싶거나 본인 스스로를 증가하고 싶을 때 재귀함수를 쓴다 */
//   }
// }, 2000);
// /* 안녕하세요가 다섯번 찍히면 멈추고 싶다
// => 1씩 증가하게 하고 5가 되는 순간 멈추게 함*/

//----------------------------------
// setTimeout(); : 특정 시간이 경과한 이후에 작동하게 만드는 함수
// heap / callstack / Que 에 따라 동기처리, 비동기 처리 누가 먼저 시작???
//ㄴ 이 내용은 나중에..

setTimeout(() => {
  console.log("안녕하세요..?");
}, 3000);
/* 안녕하세요..?가 3초 뒤에 콘솔창에 나옴 */
